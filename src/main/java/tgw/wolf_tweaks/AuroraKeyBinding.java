package tgw.wolf_tweaks;

import org.jetbrains.annotations.Nullable;

public class AuroraKeyBinding {
    public String context;
    public int keyCode;
    public String modifier;

    public AuroraKeyBinding(int i, @Nullable String a, String b) {
        this.keyCode = i;
        this.modifier = a;
        this.context = b;
    }

    static int ToAuroraKeyCode(String a) {
        String key = a.replace("key.keyboard.", "");
        return switch (key) {
            // case 0x00: return DeviceKeys.NONE;
            // case 0x01: return DeviceKeys.ESC;
            case "esc" -> 0x01;
            // case 0x02: return DeviceKeys.ONE;
            case "1" -> 0x02;
            // case 0x03: return DeviceKeys.TWO;
            case "2" -> 0x03;
            // case 0x04: return DeviceKeys.THREE;
            case "3" -> 0x04;
            // case 0x05: return DeviceKeys.FOUR;
            case "4" -> 0x05;
            // case 0x06: return DeviceKeys.FIVE;
            case "5" -> 0x06;
            // case 0x07: return DeviceKeys.SIX;
            case "6" -> 0x07;
            // case 0x08: return DeviceKeys.SEVEN;
            case "7" -> 0x08;
            // case 0x09: return DeviceKeys.EIGHT;
            case "8" -> 0x09;
            // case 0x0A: return DeviceKeys.NINE;
            case "9" -> 0x0A;
            // case 0x0B: return DeviceKeys.ZERO;
            case "0" -> 0x0B;
            // case 0x0C: return DeviceKeys.MINUS;
            case "minus" -> 0x0C;
            // case 0x0D: return DeviceKeys.EQUALS;
            case "equal" -> 0x0D;
            // case 0x0E: return DeviceKeys.BACKSPACE;
            case "backspace" -> 0x0E;
            // case 0x0F: return DeviceKeys.TAB;
            case "tab" -> 0x0F;
            // case 0x10: return DeviceKeys.Q;
            case "q" -> 0x10;
            // case 0x11: return DeviceKeys.W;
            case "w" -> 0x11;
            // case 0x12: return DeviceKeys.E;
            case "e" -> 0x12;
            // case 0x13: return DeviceKeys.R;
            case "r" -> 0x13;
            // case 0x14: return DeviceKeys.T;
            case "t" -> 0x14;
            // case 0x15: return DeviceKeys.Y;
            case "y" -> 0x15;
            // case 0x16: return DeviceKeys.U;
            case "u" -> 0x16;
            // case 0x17: return DeviceKeys.I;
            case "i" -> 0x17;
            // case 0x18: return DeviceKeys.O;
            case "o" -> 0x18;
            // case 0x19: return DeviceKeys.P;
            case "p" -> 0x19;
            // case 0x1A: return DeviceKeys.OPEN_BRACKET;
            case "left.bracket" -> 0x1A;
            // case 0x1B: return DeviceKeys.CLOSE_BRACKET;
            case "right.bracket" -> 0x1B;
            // case 0x1C: return DeviceKeys.ENTER;
            case "enter" -> 0x1B;
            // case 0x1D: return DeviceKeys.LEFT_CONTROL;
            case "left.control" -> 0x1D;
            // case 0x1E: return DeviceKeys.A;
            case "a" -> 0x1E;
            // case 0x1F: return DeviceKeys.S;
            case "s" -> 0x1F;
            // case 0x20: return DeviceKeys.D;
            case "d" -> 0x20;
            // case 0x21: return DeviceKeys.F;
            case "f" -> 0x21;
            // case 0x22: return DeviceKeys.G;
            case "g" -> 0x22;
            // case 0x23: return DeviceKeys.H;
            case "h" -> 0x23;
            // case 0x24: return DeviceKeys.J;
            case "j" -> 0x24;
            // case 0x25: return DeviceKeys.K;
            case "k" -> 0x25;
            // case 0x26: return DeviceKeys.L;
            case "l" -> 0x26;
            // case 0x27: return DeviceKeys.SEMICOLON;
            case "semicolon" -> 0x27;
            // case 0x28: return DeviceKeys.APOSTROPHE;
            case "apostrophe" -> 0x28;
            // case 0x29: return DeviceKeys.TILDE;
            case "tilde" -> 0x29;//???
            // case 0x2A: return DeviceKeys.LEFT_SHIFT;
            case "left.shift" -> 0x2A;
            // case 0x2B: return DeviceKeys.BACKSLASH;
            case "backslash" -> 0x2B;
            // case 0x2C: return DeviceKeys.Z;
            case "z" -> 0x2C;
            // case 0x2D: return DeviceKeys.X;
            case "x" -> 0x2D;
            // case 0x2E: return DeviceKeys.C;
            case "c" -> 0x2E;
            // case 0x2F: return DeviceKeys.V;
            case "v" -> 0x2F;
            // case 0x30: return DeviceKeys.B;
            case "b" -> 0x30;
            // case 0x31: return DeviceKeys.N;
            case "n" -> 0x31;
            // case 0x32: return DeviceKeys.M;
            case "m" -> 0x32;
            // case 0x33: return DeviceKeys.COMMA;
            case "comma" -> 0x33;
            // case 0x34: return DeviceKeys.PERIOD;
            case "period" -> 0x34;
            // case 0x35: return DeviceKeys.FORWARD_SLASH;
            case "slash" -> 0x35;
            // case 0x36: return DeviceKeys.RIGHT_SHIFT;
            case "right.shift" -> 0x36;
            // case 0x37: return DeviceKeys.NUM_ASTERISK;
            case "keypad.multiply" -> 0x37;
            // case 0x38: return DeviceKeys.LEFT_ALT;
            case "left.alt" -> 0x38;
            // case 0x39: return DeviceKeys.SPACE;
            case "space" -> 0x39;
            // case 0x3A: return DeviceKeys.CAPS_LOCK;
            case "caps.lock" -> 0x3A;
            // case 0x3B: return DeviceKeys.F1;
            case "f1" -> 0x3B;
            // case 0x3C: return DeviceKeys.F2;
            case "f2" -> 0x3C;
            // case 0x3D: return DeviceKeys.F3;
            case "f3" -> 0x3D;
            // case 0x3E: return DeviceKeys.F4;
            case "f4" -> 0x3E;
            // case 0x3F: return DeviceKeys.F5;
            case "f5" -> 0x3F;
            // case 0x40: return DeviceKeys.F6;
            case "f6" -> 0x40;
            // case 0x41: return DeviceKeys.F7;
            case "f7" -> 0x41;
            // case 0x42: return DeviceKeys.F8;
            case "f8" -> 0x42;
            // case 0x43: return DeviceKeys.F9;
            case "f9" -> 0x43;
            // case 0x44: return DeviceKeys.F10;
            case "f10" -> 0x44;
            // case 0x45: return DeviceKeys.NUM_LOCK;
            case "num.lock" -> 0x45;
            // case 0x46: return DeviceKeys.SCROLL_LOCK;
            case "scroll.lock" -> 0x46;
            // case 0x47: return DeviceKeys.NUM_SEVEN;
            case "keypad.7" -> 0x47;
            // case 0x48: return DeviceKeys.NUM_EIGHT;
            case "keypad.8" -> 0x48;
            // case 0x49: return DeviceKeys.NUM_NINE;
            case "keypad.9" -> 0x49;
            // case 0x4A: return DeviceKeys.NUM_MINUS;
            case "keypad.subtract" -> 0x4A;
            // case 0x4B: return DeviceKeys.NUM_FOUR;
            case "keypad.4" -> 0x4B;
            // case 0x4C: return DeviceKeys.NUM_FIVE;
            case "keypad.5" -> 0x4C;
            // case 0x4D: return DeviceKeys.NUM_SIX;
            case "keypad.6" -> 0x4D;
            // case 0x4E: return DeviceKeys.NUM_PLUS;
            case "keypad.add" -> 0x4E;
            // case 0x4F: return DeviceKeys.NUM_ONE;
            case "keypad.1" -> 0x4F;
            // case 0x50: return DeviceKeys.NUM_TWO;
            case "keypad.2" -> 0x50;
            // case 0x51: return DeviceKeys.NUM_THREE;
            case "keypad.3" -> 0x51;
            // case 0x52: return DeviceKeys.NUM_ZERO;
            case "keypad.0" -> 0x52;
            // case 0x53: return DeviceKeys.NUM_PERIOD;
            case "keypad.decimal" -> 0x53;
            // case 0x57: return DeviceKeys.F11;
            case "f11" -> 0x57;
            // case 0x58: return DeviceKeys.F12;
            case "f12" -> 0x58;
            // case 0x9C: return DeviceKeys.NUM_ENTER;
            case "keypad.enter" -> 0x9C;
            // case 0x9D: return DeviceKeys.RIGHT_CONTROL;
            case "right.control" -> 0x9D;
            // case 0xB5: return DeviceKeys.NUM_SLASH;
            case "keypad.divide" -> 0xB5;
            // case 0xB8: return DeviceKeys.RIGHT_ALT;
            case "right.alt" -> 0xB8;
            // case 0xC5: return DeviceKeys.PAUSE_BREAK;
            case "pause" -> 0xC5;
            // case 0xC7: return DeviceKeys.HOME;
            case "home" -> 0xC7;
            // case 0xC8: return DeviceKeys.ARROW_UP;
            case "up" -> 0xC8;
            // case 0xC9: return DeviceKeys.PAGE_UP;
            case "page.up" -> 0xC9;
            // case 0xCB: return DeviceKeys.ARROW_LEFT;
            case "left" -> 0xCB;
            // case 0xCD: return DeviceKeys.ARROW_RIGHT;
            case "right" -> 0xCD;
            // case 0xCF: return DeviceKeys.END;
            case "end" -> 0xCF;
            // case 0xD0: return DeviceKeys.ARROW_DOWN;
            case "down" -> 0xCF;
            // case 0xD1: return DeviceKeys.PAGE_DOWN;
            case "page.down" -> 0xD1;
            // case 0xD2: return DeviceKeys.INSERT;
            case "insert" -> 0xD2;
            // case 0xD3: return DeviceKeys.DELETE;
            case "delete" -> 0xD3;
            // case 0xDB: return DeviceKeys.LEFT_WINDOWS;
            case "left.win" -> 0xDB;
            default -> 0x00;
        };
    }
}

